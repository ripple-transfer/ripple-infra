---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: k8s-monitoring
  namespace: grafana-k8s-monitoring
spec:
  interval: 30m
  chart:
    spec:
      chart: k8s-monitoring
      version: "1.x"
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: grafana-k8s-monitoring
      interval: 12h
  values:
    cluster:
      name: dev
    externalServices:
      prometheus:
        host: http://mimir-gateway.grafana-mimir.svc
        writeEndpoint: /api/v1/push
        queryEndpoint: /prometheus/api/v1/query
        authMode: none
      loki:
        host: http://loki-gateway.grafana-loki.svc
        authMode: none
      pyroscope:
        host: http://pyroscope-distributor.grafana-pyroscope.svc:4040
        authMode: none
      tempo:
        host: http://tempo-distributor.grafana-tempo.svc
        authMode: none
    profiles:
      enabled: true
    traces:
      enabled: true
    prometheus-operator-crds:
      enabled: false
    metrics:
      apiserver:
        enabled: true
      kubeControllerManager:
        enabled: true
      kubeProxy:
        enabled: true
      kubeScheduler:
        enabled: true
      autoDiscover:
        extraRelabelingRules: |
          rule {
            source_labels = [
              "__meta_kubernetes_pod_label_app",
              "__meta_kubernetes_pod_label_k8s_app",
              "__meta_kubernetes_service_label_app",
              "__meta_kubernetes_service_label_k8s_app",
              "__meta_kubernetes_endpoints_label_app",
              "__meta_kubernetes_endpoints_label_k8s_app",
            ]
            action = "replace"
            target_label = "app"
            separator = ""
          }
    opencost:
      # TODO: Set up basic auth for this to work
      enabled: false
      opencost:
        prometheus:
          external:
            url: http://mimir-gateway.grafana-mimir.svc/prometheus
    alloy:
      alloy:
        clustering:
          enabled: true
    # Hassle: We want to scrape using the classic prometheus.io annotations as well

    # Hassle: The default annotation scraping config in k8s-monitoring discards pods / services
    # that do not match the requested annotation port number. Unfortunately, this is not a viable solution,
    # as sometimes Prometheus metric ports are not exposed as container ports (e.g. on Istio pods). Instead,
    # we replace the scrape port for each discovered Kubernetes resource and rely on Alloy's deduplication
    # to leave us with a single target per resource
    extraConfig: |
      // pods
      discovery.relabel "prometheus_annotations_pods" {
        targets = discovery.kubernetes.pods.targets
        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
          regex = "(true)"
          action = "keep"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_port", "__meta_kubernetes_pod_ip"]
          regex = "(\\d+);((([0-9]+?)(\\.|$)){4})"
          replacement = "$2:$1"
          target_label = "__address__"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_path"]
          target_label = "__metrics_path__"
          regex = "(.*)"
          replacement = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape_interval"]
          target_label = "__scrape_interval__"
          regex = "(.*)"
          replacement = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape_timeout"]
          target_label = "__scrape_timeout__"
          regex = "(.*)"
          replacement = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_job"]
          target_label = "job"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scheme"]
          action = "replace"
          target_label = "__scheme__"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_label_app", "__meta_kubernetes_pod_label_k8s_app"]
          action = "replace"
          target_label = "app"
          separator = ""
        }
      }

      // services
      discovery.relabel "prometheus_annotations_services" {
        targets = discovery.kubernetes.services.targets
        rule {
          source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_scrape"]
          regex = "(true)"
          action = "keep"
        }

        rule {
          source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_path"]
          target_label = "__metrics_path__"
          regex = "(.*)"
          replacement = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_scrape_interval"]
          target_label = "__scrape_interval__"
          regex = "(.*)"
          replacement = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_scrape_timeout"]
          target_label = "__scrape_timeout__"
          regex = "(.*)"
          replacement = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_job"]
          target_label = "job"
        }

        rule {
          source_labels = ["__address__", "__meta_kubernetes_service_annotation_prometheus_io_port"]
          action = "replace"
          regex = "(.+?)(?::\\d+)?;(\\d+)"
          replacement = "$1:$2"
          target_label = "__address__"
        }

        rule {
          source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_scheme"]
          action = "replace"
          target_label = "__scheme__"
        }

        rule {
          source_labels = ["__meta_kubernetes_service_label_app", "__meta_kubernetes_service_label_k8s_app"]
          action = "replace"
          target_label = "app"
          separator = ""
        }
      }

      // istio
      discovery.relabel "istio" {
        targets = discovery.kubernetes.endpoints.targets
        rule {
          source_labels = ["__meta_kubernetes_service_name", "__meta_kubernetes_endpoint_port_name"]
          action = "keep"
          regex = "istiod;http-monitoring"
        }

        rule {
          source_labels = ["__meta_kubernetes_service_label_app", "__meta_kubernetes_service_label_k8s_app"]
          action = "replace"
          target_label = "app"
          separator = ""
        }
      }

      discovery.relabel "prometheus_annotations_http" {
        targets = concat(discovery.relabel.prometheus_annotations_pods.output, discovery.relabel.prometheus_annotations_services.output, discovery.relabel.istio.output)
        rule {
          source_labels = ["__scheme__"]
          regex = "https"
          action = "drop"
        }
      }

      discovery.relabel "prometheus_annotations_https" {
        targets = concat(discovery.relabel.prometheus_annotations_pods.output, discovery.relabel.prometheus_annotations_services.output, discovery.relabel.istio.output)
        rule {
          source_labels = ["__scheme__"]
          regex = "https"
          action = "keep"
        }
      }

      prometheus.scrape "prometheus_annotations_http" {
        targets = discovery.relabel.prometheus_annotations_http.output
        honor_labels = true
        clustering {
          enabled = true
        }
        forward_to = [prometheus.relabel.prometheus_annotations.receiver]
      }

      prometheus.scrape "prometheus_annotations_https" {
        targets = discovery.relabel.prometheus_annotations_https.output
        honor_labels = true
        bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
        tls_config {
          insecure_skip_verify = true
        }
        clustering {
          enabled = true
        }
        forward_to = [prometheus.relabel.prometheus_annotations.receiver]
      }

      prometheus.relabel "prometheus_annotations" {
        max_cache_size = 100000
        forward_to = [prometheus.relabel.metrics_service.receiver]
      }
