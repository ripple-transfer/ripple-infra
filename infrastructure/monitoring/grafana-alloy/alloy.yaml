---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: alloy
  namespace: grafana-alloy
spec:
  interval: 30m
  chart:
    spec:
      chart: alloy
      version: "0.x"
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: grafana-alloy
      interval: 12h
  values:
    alloy:
      mounts:
        varlog: true
      clustering:
        enabled: true
      configMap:
        content: |-
          // Kubernetes
          discovery.kubernetes "nodes" {
            role = "node"
          }

          discovery.kubernetes "pod" {
            role = "pod"
          }

          discovery.kubernetes "service" {
            role = "service"
          }

          // Metrics
          prometheus.exporter.self "alloy" {
          }

          prometheus.scrape "alloy" {
            targets    = prometheus.exporter.self.alloy.targets
            forward_to = [prometheus.remote_write.default.receiver]
          }

          prometheus.scrape "pod" {
            targets    = discovery.kubernetes.pod.targets
            forward_to = [prometheus.remote_write.default.receiver]
          }

          prometheus.scrape "service" {
            targets    = discovery.kubernetes.service.targets
            forward_to = [prometheus.remote_write.default.receiver]
          }

          prometheus.scrape "cadvisor" {
            scheme = "https"
            tls_config {
                server_name = "kubernetes"
                ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
                insecure_skip_verify = false
            }
            bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
            targets = discovery.relabel.metrics_cadvisor.output
            scrape_interval = "60s"
            forward_to = [prometheus.remote_write.default.receiver]
          }

          prometheus.scrape "kubelet" {
            scheme = "https"
            tls_config {
                server_name = "kubernetes"
                ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
                insecure_skip_verify = false
            }
            bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
            targets = discovery.relabel.metrics_kubelet.output
            scrape_interval = "60s"
            forward_to = [prometheus.remote_write.default.receiver]
          }

          discovery.relabel "metrics_cadvisor" {
            targets = discovery.kubernetes.nodes.targets

            rule {
              action = "replace"
              target_label = "__address__"
              replacement = "kubernetes.default.svc.cluster.local:443"
            }

            rule {
              source_labels = ["__meta_kubernetes_node_name"]
              regex = "(.+)"
              action = "replace"
              replacement = "/api/v1/nodes/$${1}/proxy/metrics/cadvisor"
              target_label = "__metrics_path__"
            }
          }

          discovery.relabel "metrics_kubelet" {
            targets = discovery.kubernetes.nodes.targets

            rule {
              action = "replace"
              target_label = "__address__"
              replacement = "kubernetes.default.svc.cluster.local:443"
            }

            rule {
              source_labels = ["__meta_kubernetes_node_name"]
              regex = "(.+)"
              action = "replace"
              replacement = "/api/v1/nodes/$${1}/proxy/metrics"
              target_label = "__metrics_path__"
            }
          }

          prometheus.operator.servicemonitors "services" {
            forward_to = [prometheus.remote_write.default.receiver]
          }

          prometheus.remote_write "default" {
            endpoint {
              url = "http://mimir-gateway.mimir.svc.cluster.local:80/api/v1/push"
            }
          }

          // Logging
          logging {
            level = "info"
            format = "logfmt"
            write_to = [loki.write.default.receiver]
          }

          local.file_match "node_logs" {
            path_targets = [{
                // Monitor syslog to scrape node-logs
                __path__  = "/var/log/syslog",
                job       = "node/syslog",
                node_name = env("HOSTNAME"),
                cluster   = "dev",
            }]
          }

          loki.source.file "node_logs" {
            targets    = local.file_match.node_logs.targets
            forward_to = [loki.write.default.receiver]
          }

          discovery.relabel "pod_logs" {
            targets = discovery.kubernetes.pod.targets

            // Label creation - "namespace" field from "__meta_kubernetes_namespace"
            rule {
              source_labels = ["__meta_kubernetes_namespace"]
              action = "replace"
              target_label = "namespace"
            }

            // Label creation - "pod" field from "__meta_kubernetes_pod_name"
            rule {
              source_labels = ["__meta_kubernetes_pod_name"]
              action = "replace"
              target_label = "pod"
            }

            // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
            rule {
              source_labels = ["__meta_kubernetes_pod_container_name"]
              action = "replace"
              target_label = "container"
            }

            // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
            rule {
              source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
              action = "replace"
              target_label = "app"
            }

            // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
            // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
            rule {
              source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
              action = "replace"
              target_label = "job"
              separator = "/"
              replacement = "$1"
            }

            // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
            // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
            rule {
              source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
              action = "replace"
              target_label = "__path__"
              separator = "/"
              replacement = "/var/log/pods/*$1/*.log"
            }

            // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
            rule {
              source_labels = ["__meta_kubernetes_pod_container_id"]
              action = "replace"
              target_label = "container_runtime"
              regex = "^(\\S+):\\/\\/.+$"
              replacement = "$1"
            }
          }

          loki.source.kubernetes "pod_logs" {
            targets    = discovery.relabel.pod_logs.output
            forward_to = [loki.process.pod_logs.receiver]
          }

          loki.process "pod_logs" {
            stage.static_labels {
                values = {
                  cluster = "dev",
                }
            }

            forward_to = [loki.write.default.receiver]
          }

          loki.source.kubernetes_events "cluster_events" {
            job_name   = "integrations/kubernetes/eventhandler"
            log_format = "logfmt"
            forward_to = [
              loki.process.cluster_events.receiver,
            ]
          }

          loki.process "cluster_events" {
            forward_to = [loki.write.default.receiver]

            stage.static_labels {
              values = {
                cluster = "dev",
              }
            }

            stage.labels {
              values = {
                kubernetes_cluster_events = "job",
              }
            }
          }

          loki.write "default" {
            endpoint {
              url = "http://loki-gateway.grafana-loki.svc.cluster.local/loki/api/v1/push"
            }
          }

          // Tracing
          tracing {
            sampling_fraction = 0.1
            write_to          = [otelcol.exporter.otlp.tempo.input]
          }

          otelcol.exporter.otlp "tempo" {
              client {
                  endpoint = "tempo-distributor.grafana-tempo.svc.cluster.local:4317"
              }
          }

          // OTEL
          otelcol.receiver.otlp "default" {
            grpc {}
            http {}

            output {
              metrics = [otelcol.processor.batch.default.input]
              logs    = [otelcol.processor.batch.default.input]
              traces  = [otelcol.processor.batch.default.input]
            }
          }

          otelcol.processor.batch "default" {
            output {
              metrics = [otelcol.exporter.prometheus.default.input]
              logs    = [otelcol.exporter.loki.default.input]
              traces  = [otelcol.exporter.otlp.tempo.input]
            }
          }

          otelcol.exporter.loki "default" {
          	forward_to = [loki.write.default.receiver]
          }

          otelcol.exporter.prometheus "default" {
            forward_to = [prometheus.remote_write.default.receiver]
          }

